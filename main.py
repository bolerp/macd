import asyncio
import logging
import sys
import csv
from datetime import datetime, timezone
from pathlib import Path

import requests  # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è marketcap

from dotenv import load_dotenv

# ----------------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---------------------------------
LOG_LEVEL = logging.DEBUG if "--debug" in sys.argv else logging.INFO
# ----------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å + —Ñ–∞–π–ª ---------------------

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs, –µ—Å–ª–∏ –Ω–µ—Ç
LOG_DIR = Path("logs")
LOG_DIR.mkdir(parents=True, exist_ok=True)

# –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–∞–π–º—Å—Ç–∞–º–ø–æ–º
_ts = datetime.now(timezone.utc).strftime("%Y%m%d_%H%M%S")
RUN_LOG_PATH = LOG_DIR / f"scan_{_ts}.log"

logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),  # –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler(RUN_LOG_PATH, encoding="utf-8"),  # –ø–æ–ª–Ω—ã–π –ª–æ–≥ –≤ —Ñ–∞–π–ª
    ],
    force=True,
)
logger = logging.getLogger(__name__)

# --- –ò–º–ø–æ—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä -----------------------
from alerter import escape_markdown_v2, send_telegram_alert, send_telegram_photo
from data_provider import get_target_pairs, check_liquidity
from scanner import analyze_pair
from chart_utils import generate_chart

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Helper: –ø–æ–ª—É—á–∏—Ç—å market-cap –∏–∑ DexScreener ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_MC_CACHE: dict[str, float] = {}


def get_marketcap_usd(mint: str) -> float | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç FDV/marketCap USD –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –ø–æ –µ–≥–æ mint-–∞–¥—Ä–µ—Å—É.

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API DexScreener, –∫–µ—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫
    —Å–µ—Ä–≤–∏—Å—É –º–Ω–æ–≥–æ —Ä–∞–∑ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω.
    """
    if mint in _MC_CACHE:
        return _MC_CACHE[mint]

    url = f"https://api.dexscreener.com/latest/dex/tokens/{mint}"
    try:
        resp = requests.get(url, timeout=10)
        data = resp.json()
        if data.get("pairs"):
            pair = data["pairs"][0]
            mc_val = pair.get("fdv") or pair.get("marketCap")
            if mc_val:
                _MC_CACHE[mint] = float(mc_val)
                return float(mc_val)
    except Exception as exc:  # noqa: BLE001
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å marketcap –¥–ª—è %s: %s", mint, exc)

    return None


# ----------------------- –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–¥–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ ------------------------

def build_message(symbol: str, name: str, mint: str, info: dict, mcap: float | None) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ MarkdownV2-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ."""

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —á–∞—Å—Ç–∏, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥—è—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    safe_symbol = escape_markdown_v2(symbol)
    safe_name = escape_markdown_v2(name)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
    price_str = f"{info['close']:.6f}".rstrip("0").rstrip(".")
    volume_k = int(info['volumeUSD']) // 1_000
    mc_line = f"üè¶ *–ú–∞—Ä–∫–ö–∞–ø:* `${mcap/1_000_000:.2f}M`" if mcap else "üè¶ *–ú–∞—Ä–∫–ö–∞–ø:* `n/a`"
    arrow = "üìà" if info['macd_curr'] > info['macd_prev'] else "üìâ"

    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    lines = [
        # –í–ê–ñ–ù–û: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–∏—Ä–µ (–º–∏–Ω—É—Å) –ø—Ä—è–º–æ –∑–¥–µ—Å—å
        f"üö® *MACD\\-—Å–∏–≥–Ω–∞–ª* {arrow}",
        "",
        f"üè∑Ô∏è *–¢–æ–∫–µ–Ω:* `{safe_symbol}` \\({safe_name}\\)",
        f"üîë *–ö–æ–Ω—Ç—Ä–∞–∫—Ç:* `{mint}`",
        f"üíµ *–¶–µ–Ω–∞:* `${price_str}`",
        mc_line,
        f"üìä *MACD:* `{info['macd_prev']:.6f}` ‚Üí `{info['macd_curr']:.6f}`",
        f"üí∏ *–û–±—ä—ë–º:* `${volume_k}k`",
        "",
        f"üîó [DexScreener](https://dexscreener.com/solana/{mint}) "
        f"\\| [Birdeye](https://birdeye.so/token/{mint}?chain=solana)"
    ]
    return "\n".join(lines)


# ------------------------------- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª -----------------------------

async def scan_and_alert(limit: int = 50):
    logger.info("–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è‚Ä¶ (limit=%s)", limit)
    charts_enabled = "--no-chart" not in sys.argv  # –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏

    # CSV-—Ñ–∞–π–ª –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤, –ø—Ä–æ—à–µ–¥—à–∏—Ö TVL, –Ω–æ –±–µ–∑ MACD —Å–∏–≥–Ω–∞–ª–∞
    fail_csv_path = LOG_DIR / f"tvl_ok_macd_fail_{_ts}.csv"
    csv_file = fail_csv_path.open("w", newline="", encoding="utf-8")
    csv_writer = csv.writer(csv_file)
    csv_writer.writerow(["symbol", "name", "mint", "macd_prev", "macd_curr"])

    sent_today = set()  # –ø—Ä–æ—Å—Ç–æ–π –∞–Ω—Ç–∏-–¥—É–ø–ª–∏–∫–∞—Ç–æ—Ä

    pairs = get_target_pairs(limit=limit)

    # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞—Ä–∫–µ—Ç–∞—Ö ‚Üí –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π
    unique_pairs = {}
    for p in pairs:
        mint = p.get("mintAddress")
        if mint and mint not in unique_pairs:
            unique_pairs[mint] = p

    pairs = list(unique_pairs.values())
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ %d –ø–∞—Ä (—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: %d)", len(pairs), len(pairs))

    for token in pairs:
        mint = token["mintAddress"]
        symbol = token.get("symbol", "?")
        name = token.get("name", "")

        if mint in sent_today:
            continue

        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º %s (%s) | mint: %s", symbol, name, mint)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        if not check_liquidity(mint):
            logger.info("%s ‚Äì –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TVL | mint: %s", symbol, mint)
            continue

        logger.info("%s ‚Äì TVL –Ω–æ—Ä–º, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º MACD... | mint: %s", symbol, mint)
        info = analyze_pair(mint)
        if not info:
            logger.info("%s ‚Äì –Ω–µ—Ç MACD-–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è | mint: %s", symbol, mint)
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ CSV —Ñ–∞–π–ª –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
            try:
                # –ø–∏—à–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è macd, —Ç.–∫. –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–Ω—É–ª None
                csv_writer.writerow([symbol, name, mint, "", ""])
            except Exception:
                pass
            continue

        mcap = get_marketcap_usd(mint)
        message = build_message(symbol, name, mint, info, mcap)

        if charts_enabled:
            try:
                chart = generate_chart(mint, symbol)
                if chart:
                    await send_telegram_photo(chart, message)
                else:
                    await send_telegram_alert(message)
            except Exception as e:             # –µ—Å–ª–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ/–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–ø–∞–ª–æ
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è %s: %s", symbol, e)
                await send_telegram_alert(message)
        else:
            await send_telegram_alert(message)

        sent_today.add(mint)
        logger.info("–°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: %s", symbol)

    logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–∏–≥–Ω–∞–ª–æ–≤: %d", len(sent_today))
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º CSV
    csv_file.close()


# ------------------------------ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ --------------------------------

async def main():
    """CLI entry point.

    --test  : –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–π—Ç–∏
    --scan  : –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    """

    if "--test" in sys.argv:
        raw = "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –≠—Ç–æ *—Ç–µ—Å—Ç–æ–≤–æ–µ* —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."
        await send_telegram_alert(escape_markdown_v2(raw))
        logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫–∞–Ω–∏—Ä—É–µ–º
    limit = 500
    if "--limit" in sys.argv:
        try:
            idx = sys.argv.index("--limit")
            limit = int(sys.argv[idx + 1])
        except Exception:  # noqa: BLE001
            logger.warning("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è --limit, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 50")

    await scan_and_alert(limit=limit)


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    load_dotenv(override=True)

    asyncio.run(main()) 