"""test_macd.py

–¢–µ—Å—Ç-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ MACD —Ä–∞—Å—á—ë—Ç–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–æ–∫–µ–Ω–µ.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_macd.py <mint_address> [--days 90] [--from 2025-06-20] [--to 2025-06-30]

–ü—Ä–∏–º–µ—Ä: python test_macd.py 9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump --days 90 --from 2025-06-20
"""
import sys
import pandas as pd
import ta
from datetime import datetime, timedelta
from dotenv import load_dotenv
from data_provider import get_ohlcv_data

def test_macd(mint_address: str, days: int = 60, date_from: str = None, date_to: str = None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç MACD —Ä–∞—Å—á—ë—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º MACD –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {mint_address}")
    print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ –∑–∞ {days} –¥–Ω–µ–π...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = get_ohlcv_data(mint_address, days=days)
    if df.empty:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
        return
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} –¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–µ—á–µ–π")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['Date'].min()} ‚Üí {df['Date'].max()}")
    print()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MACD
    close = df["Close"].astype(float)
    macd_indicator = ta.trend.MACD(close=close, window_slow=26, window_fast=12, window_sign=9)
    
    df["MACD"] = macd_indicator.macd()
    df["MACD_Signal"] = macd_indicator.macd_signal()
    df["MACD_Histogram"] = macd_indicator.macd_diff()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    display_df = df.copy()
    if date_from:
        try:
            from_date = pd.to_datetime(date_from)
            display_df = display_df[display_df['Date'] >= from_date]
            print(f"üîç –§–∏–ª—å—Ç—Ä —Å: {date_from}")
        except:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '–æ—Ç': {date_from}")
    
    if date_to:
        try:
            to_date = pd.to_datetime(date_to) + timedelta(days=1)  # –≤–∫–ª—é—á–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å
            display_df = display_df[display_df['Date'] < to_date]
            print(f"üîç –§–∏–ª—å—Ç—Ä –¥–æ: {date_to}")
        except:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '–¥–æ': {date_to}")
    
    if date_from or date_to:
        print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    print(f"üìà MACD –¥–∞–Ω–Ω—ã–µ ({len(display_df)} –¥–Ω–µ–π):")
    print("-" * 90)
    
    for idx, row in display_df.iterrows():
        date = row["Date"].strftime("%Y-%m-%d")
        close_price = f"{row['Close']:.8g}"
        macd = f"{row['MACD']:.6g}" if pd.notna(row["MACD"]) else "NaN"
        signal = f"{row['MACD_Signal']:.6g}" if pd.notna(row["MACD_Signal"]) else "NaN"
        histogram = f"{row['MACD_Histogram']:.6g}" if pd.notna(row["MACD_Histogram"]) else "NaN"
        
        print(f"{date} | Close: {close_price:>12} | MACD: {macd:>10} | Signal: {signal:>10} | Hist: {histogram:>10}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω—É–ª–µ–≤–æ–π –ª–∏–Ω–∏–∏
    print()
    print("üéØ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω—É–ª–µ–≤–æ–π –ª–∏–Ω–∏–∏:")
    print("-" * 60)
    
    crossings = []
    
    for i in range(1, len(df)):
        prev_macd = df.iloc[i-1]["MACD"]
        curr_macd = df.iloc[i]["MACD"]
        curr_date = df.iloc[i]["Date"]
        
        if pd.notna(prev_macd) and pd.notna(curr_macd):
            if prev_macd < 0 and curr_macd >= 0:
                crossings.append((curr_date, "üü¢ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö (BUY —Å–∏–≥–Ω–∞–ª)", prev_macd, curr_macd))
            elif prev_macd > 0 and curr_macd <= 0:
                crossings.append((curr_date, "üî¥ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–Ω–∏–∑ (SELL —Å–∏–≥–Ω–∞–ª)", prev_macd, curr_macd))
    
    if crossings:
        for date, signal, prev_val, curr_val in crossings:
            print(f"{date.strftime('%Y-%m-%d')}: {signal}")
            print(f"    ‚îî‚îÄ {prev_val:.6g} ‚Üí {curr_val:.6g}")
    else:
        print("–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω—É–ª–µ–≤–æ–π –ª–∏–Ω–∏–∏ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print()
    print("üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å):")
    print("-" * 40)
    last_row = df.iloc[-1]
    current_macd = last_row["MACD"]
    
    if pd.notna(current_macd):
        status = "üü¢ –í–´–®–ï –Ω—É–ª—è" if current_macd > 0 else "üî¥ –ù–ò–ñ–ï –Ω—É–ª—è"
        print(f"MACD: {current_macd:.6g} ({status})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å)
        if len(df) >= 2:
            prev_macd = df.iloc[-2]["MACD"]
            if pd.notna(prev_macd):
                would_trigger = prev_macd < 0 and current_macd >= 0
                trigger_status = "‚úÖ –î–ê" if would_trigger else "‚ùå –ù–ï–¢"
                print(f"–ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª (–≤—á–µ—Ä–∞ < 0, —Å–µ–≥–æ–¥–Ω—è >= 0): {trigger_status}")
    else:
        print("MACD: NaN (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)")

def main():
    load_dotenv()
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_macd.py <mint_address> [--days 90] [--from 2025-06-20] [--to 2025-06-30]")
        print("–ü—Ä–∏–º–µ—Ä: python test_macd.py 9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump --from 2025-06-20")
        return
    
    mint_address = sys.argv[1]
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    days = 60
    date_from = None
    date_to = None
    
    args = sys.argv[2:]
    i = 0
    while i < len(args):
        if args[i] == '--days' and i + 1 < len(args):
            days = int(args[i + 1])
            i += 2
        elif args[i] == '--from' and i + 1 < len(args):
            date_from = args[i + 1]
            i += 2
        elif args[i] == '--to' and i + 1 < len(args):
            date_to = args[i + 1]
            i += 2
        else:
            i += 1
    
    test_macd(mint_address, days, date_from, date_to)

if __name__ == "__main__":
    main() 